Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2019-12-24T09:15:42+03:00

====== Connecting to GitHub with SSH ======
Создан Вторник 24 Декабрь 2019

===== About SSH =====

Using the SSH protocol, you can connect and authenticate to remote servers and services. With SSH keys, you can connect to GitHub without supplying your username or password at each visit.

When you set up SSH, you'll generate an SSH key and add it to the ssh-agent and then add the key to your GitHub account. Adding the SSH key to the ssh-agent ensures that your SSH key has an extra layer of security through the use of a passphrase. For more information, see "Working with SSH key passphrases."

To use your SSH key with a repository owned by an organization that uses SAML single sign-on, you'll need to authorize it first. For more information, see "Authorizing an SSH key for use with SAML single sign-on."

We recommend that you regularly review your SSH keys list and revoke any that are invalid or have been compromised.

If you haven't used your SSH key for a year, then GitHub will automatically delete your inactive SSH key as a security precaution. For more information, see "Deleted or missing SSH keys."

If you're a member of an organization that provides SSH certificates, you can use your certificate to access that organization's repositories without adding the certificate to your GitHub account. For more information, see "About SSH certificate authorities."

===== Checking for existing SSH keys =====

Before you generate an SSH key, you can check to see if you have any existing SSH keys.

Open Terminal.

To see if existing SSH keys are present enter

{{{code: lang="sh" linenumbers="False"
$ ls -al ~/.ssh 
# Lists the files in your .ssh directory, if they exist
}}}

Check the directory listing to see if you already have a public SSH key. By default, the filenames of the public keys are one of the following:
'''

id_rsa.pub
id_ecdsa.pub
id_ed25519.pub
'''


If you don't have an existing public and private key pair, or don't wish to use any that are available to connect to GitHub, then generate a new SSH key.

If you see an existing public and private key pair listed (for example id_rsa.pub and id_rsa) that you would like to use to connect to GitHub, you can add your SSH key to the ssh-agent.

===== Generating a new SSH key and adding it to the ssh-agent =====

After you've checked for existing SSH keys, you can generate a new SSH key to use for authentication, then add it to the ssh-agent.

If you don't already have an SSH key, you must generate a new SSH key. If you're unsure whether you already have an SSH key, check for existing keys.

If you don't want to reenter your passphrase every time you use your SSH key, you can add your key to the SSH agent, which manages your SSH keys and remembers your passphrase.

==== Generating a new SSH key ====

Open Terminal.

Paste the text below, substituting in your GitHub email address.

{{{code: lang="sh" linenumbers="False"
$ ssh-keygen -t rsa -b 4096 -C "your_email@example.com"
}}}

This creates a new ssh key, using the provided email as a label.

	''> Generating public/private rsa key pair.''

When you're prompted to "Enter a file in which to save the key," press Enter. This accepts the default file location.

	''> Enter a file in which to save the key (/home/you/.ssh/id_rsa): [Press enter]''

At the prompt, type a secure passphrase. For more information, see "Working with SSH key passphrases".

'''
> Enter passphrase (empty for no passphrase): [Type a passphrase]
> Enter same passphrase again: [Type passphrase again]
'''


==== Adding your SSH key to the ssh-agent ====

Before adding a new SSH key to the ssh-agent to manage your keys, you should have checked for existing SSH keys and generated a new SSH key.

Start the ssh-agent in the background.

{{{code: lang="sh" linenumbers="False"
$ eval "$(ssh-agent -s)"
}}}

'''
> Agent pid 59566
'''


Add your SSH private key to the ssh-agent. If you created your key with a different name, or if you are adding an existing key that has a different name, replace id_rsa in the command with the name of your private key file.

{{{code: lang="sh" linenumbers="False"
$ ssh-add ~/.ssh/id_rsa
}}}


===== Adding a new SSH key to your GitHub account =====

To configure your GitHub account to use your new (or existing) SSH key, you'll also need to add it to your GitHub account.

Before adding a new SSH key to your GitHub account, you should have:

Checked for existing SSH keys
Generated a new SSH key and added it to the ssh-agent

After adding a new SSH key to your GitHub account, you can reconfigure any local repositories to use SSH. For more information, see "Switching remote URLs from HTTPS to SSH."

Copy the SSH key to your clipboard.

If your SSH key file has a different name than the example code, modify the filename to match your current setup. When copying your key, don't add any newlines or whitespace.

{{{code: lang="sh" linenumbers="False"
$ sudo apt-get install xclip
# Downloads and installs xclip

$ xclip -sel clip < ~/.ssh/id_rsa.pub
# Copies the contents of the id_rsa.pub file to your clipboard
}}}


In the upper-right corner of any page, click your profile photo, then click **Settings**.

{{./pasted_image.png}}

In the user settings sidebar, click **SSH and GPG keys**.

{{./pasted_image001.png}}

In the "Title" field, add a descriptive label for the new key. For example, if you're using a personal Mac, you might call this key "Personal MacBook Air".

Paste your key into the "Key" field.

{{./pasted_image002.png}}

Click **Add SSH key**.

{{./pasted_image003.png}}

If prompted, confirm your GitHub password.

{{./pasted_image004.png}}

===== Testing your SSH connection =====

After you've set up your SSH key and added it to your GitHub account, you can test your connection.

Before testing your SSH connection, you should have:

Checked for existing SSH keys
Generated a new SSH key
Added a new SSH key to your GitHub account
When you test your connection, you'll need to authenticate this action using your password, which is the SSH key passphrase you created earlier. For more information on working with SSH key passphrases, see "Working with SSH key passphrases".

Open Terminal.

Enter the following:

{{{code: lang="sh" linenumbers="False"
$ ssh -T git@github.com
# Attempts to ssh to GitHub
}}}

You may see a warning like this:

'''
> The authenticity of host 'github.com (IP ADDRESS)' can't be established.
  > RSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48.
  > Are you sure you want to continue connecting (yes/no)?
'''


or like this:

'''
> The authenticity of host 'github.com (IP ADDRESS)' can't be established.
  > RSA key fingerprint is SHA256:nThbg6kXUpJWGl7E1IGOCspRomTxdCARLviKw6E5SY8.
  > Are you sure you want to continue connecting (yes/no)?
'''


Verify that the fingerprint in the message you see matches one of the messages in step 2, then type yes:

'''
> Hi username! You've successfully authenticated, but GitHub does not
> provide shell access.
'''


You may see this error message:

'''
...
Agent admitted failure to sign using the key.
debug1: No more authentication methods to try.
Permission denied (publickey).
'''


This is a known problem with certain Linux distributions. For more information, see "Error: Agent admitted failure to sign".

Verify that the resulting message contains your username. If you receive a "permission denied" message, see "Error: Permission denied (publickey)".

===== Working with SSH key passphrases =====

You can secure your SSH keys and configure an authentication agent so that you won't have to reenter your passphrase every time you use your SSH keys.

With SSH keys, if someone gains access to your computer, they also gain access to every system that uses that key. To add an extra layer of security, you can add a passphrase to your SSH key. You can use ssh-agent to securely save your passphrase so you don't have to reenter it.

You can change the passphrase for an existing private key without regenerating the keypair by typing the following command:

{{{code: lang="sh" linenumbers="False"
$ ssh-keygen -p
# Start the SSH key creation process
}}}

'''
> Enter file in which the key is (/Users/you/.ssh/id_rsa): [Hit enter]
> Key has comment '/Users/you/.ssh/id_rsa'
> Enter new passphrase (empty for no passphrase): [Type new passphrase]
> Enter same passphrase again: [One more time for luck]
> Your identification has been saved with the new passphrase.
'''


If your key already has a passphrase, you will be prompted to enter it before you can change to a new passphrase.
